name: Notarization Check

on:
  schedule:
    # Run every hour
    - cron: "0 * * * *"
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write

jobs:
  check-notarizations:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for pending notarizations
        id: check-pending
        run: |
          # Get all releases and check for pending notarization files
          mkdir -p pending
          PENDING_FOUND=false

          # Get recent releases (last 10)
          gh release list --limit 10 --json tagName | jq -r '.[].tagName' > release_tags.txt

          while IFS= read -r tag; do
            echo "Checking release: $tag"
            
            # Check if there are any .pending assets
            PENDING_ASSETS=$(gh release view "$tag" --json assets | jq -r '.assets[] | select(.name | endswith(".pending")) | .name')
            
            if [ -n "$PENDING_ASSETS" ]; then
              echo "Found pending notarizations in release $tag"
              PENDING_FOUND=true
              
              # Create directory for this release
              mkdir -p "pending/$tag"
              
              # Download pending files
              echo "$PENDING_ASSETS" | while read asset_name; do
                if [ -n "$asset_name" ]; then
                  echo "Downloading $asset_name"
                  gh release download "$tag" --pattern "$asset_name" --dir "pending/$tag" || echo "Failed to download $asset_name"
                fi
              done
            fi
          done < release_tags.txt

          echo "pending_found=$PENDING_FOUND" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Process completed notarizations
        if: steps.check-pending.outputs.pending_found == 'true'
        run: |
          for release_dir in pending/*/; do
            if [ ! -d "$release_dir" ]; then continue; fi
            
            RELEASE_TAG=$(basename "$release_dir")
            echo "Processing release: $RELEASE_TAG"
            
            for pending_file in "$release_dir"/*.pending; do
              if [ ! -f "$pending_file" ]; then continue; fi
              
              echo "Processing: $(basename "$pending_file")"
              
              # Parse pending file
              SUBMISSION_ID=$(jq -r '.submission_id' "$pending_file")
              DMG_NAME=$(jq -r '.dmg_name' "$pending_file")
              
              echo "Checking notarization status for $DMG_NAME (ID: $SUBMISSION_ID)"
              
              # Validate submission ID before checking status
              if [ -z "$SUBMISSION_ID" ] || [ "$SUBMISSION_ID" = "null" ] || [ ${#SUBMISSION_ID} -lt 10 ]; then
                echo "❌ Invalid or empty submission ID for $DMG_NAME: '$SUBMISSION_ID'"
                echo "Removing invalid pending file..."
                gh release delete-asset "$RELEASE_TAG" "$(basename "$pending_file")" --yes || echo "Failed to delete pending asset"
                continue
              fi
              
              # Check notarization status
              STATUS=$(xcrun notarytool info "$SUBMISSION_ID" \
                --apple-id "${{ secrets.APPLE_ID_USERNAME }}" \
                --password "${{ secrets.APPLE_ID_APP_PASSWORD }}" \
                --team-id "${{ secrets.APPLE_TEAM_ID }}" \
                --output-format json 2>/dev/null | jq -r '.status' 2>/dev/null || echo "unknown")
              
              echo "Status for $DMG_NAME: $STATUS"
              
              if [ "$STATUS" = "Accepted" ]; then
                echo "✅ Notarization completed for $DMG_NAME"
                
                # Download the original DMG from release
                echo "Downloading original DMG..."
                gh release download "$RELEASE_TAG" --pattern "$DMG_NAME" --dir "temp/"
                
                if [ -f "temp/$DMG_NAME" ]; then
                  # Staple the notarization
                  echo "Stapling notarization to $DMG_NAME..."
                  xcrun stapler staple "temp/$DMG_NAME"
                  
                  # Verify stapling
                  echo "Verifying notarization..."
                  if xcrun stapler validate "temp/$DMG_NAME"; then
                    echo "✅ DMG notarized and stapled successfully"
                    
                    # Upload the notarized DMG back to the release
                    echo "Uploading notarized DMG..."
                    gh release upload "$RELEASE_TAG" "temp/$DMG_NAME" --clobber
                    
                    # Remove the pending file from the release
                    echo "Cleaning up pending file..."
                    gh release delete-asset "$RELEASE_TAG" "$(basename "$pending_file")" --yes || echo "Failed to delete pending asset (may not exist)"
                    
                    echo "✅ Successfully processed $DMG_NAME"
                  else
                    echo "❌ Stapling verification failed for $DMG_NAME"
                  fi
                else
                  echo "❌ Failed to download original DMG: $DMG_NAME"
                fi
                
              elif [ "$STATUS" = "Invalid" ] || [ "$STATUS" = "Rejected" ]; then
                echo "❌ Notarization failed for $DMG_NAME with status: $STATUS"
                
                # Get the log for debugging
                echo "Fetching notarization log..."
                xcrun notarytool log "$SUBMISSION_ID" \
                  --apple-id "${{ secrets.APPLE_ID_USERNAME }}" \
                  --password "${{ secrets.APPLE_ID_APP_PASSWORD }}" \
                  --team-id "${{ secrets.APPLE_TEAM_ID }}" || echo "Failed to fetch log"
                
                # Remove the pending file since it failed
                echo "Removing failed pending file..."
                gh release delete-asset "$RELEASE_TAG" "$(basename "$pending_file")" --yes || echo "Failed to delete pending asset"
                
              else
                echo "⏳ Notarization still in progress for $DMG_NAME (status: $STATUS)"
              fi
              
              # Clean up temp files
              rm -f "temp/$DMG_NAME"
            done
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "Notarization check completed at $(date)"
          echo "Processed releases in: $(ls -1 pending/ 2>/dev/null | tr '\n' ' ' || echo 'none')"
